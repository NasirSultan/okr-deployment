generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  phone     String?
  language  String?  @default("en")
  avatarPicId String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  challengesHosted Challenge[] @relation("HostChallenges")
  challengesJoined Challenge[] @relation("PlayerChallenges")
  challengeInvitations ChallengeInvitation[]
  
}

model Role {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  exampleText String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Industry {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  id          Int      @id @default(autoincrement())
  userId      String
  roleId      Int
  industryId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime @default(dbgenerated("NOW() + INTERVAL '1 day'"))
}

model Strategy {
  id        Int      @id @default(autoincrement())
  title     String
  fileUrl   String?
  cardId    Int 
  createdAt DateTime @default(now())
}

model Objective {
  id          Int    @id @default(autoincrement())
  strategyId  Int
  title       String @db.VarChar(200)
  description String?
  difficulty  Int    @default(1)

  @@map("objectives")
}

model KeyResult {
  id          Int      @id @default(autoincrement())
  objectiveId Int?
  strategyId  Int?
  text        Json
  expiresAt   DateTime @default(dbgenerated("NOW() + INTERVAL '1 day'"))
}

model KeywordBaseInnovative {
  id               Int      @id @default(autoincrement())
  strategyId       Int
  keyResult        String
  firstInnovative  Json
  secondInnovative Json
  thirdInnovative  Json? 
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model SoloScore {
  id                  Int      @id @default(autoincrement())
  userId              String
  score               Int
  scor                String?
  alignmentStrategy   Int
  objectiveClarity    Int
  keyResultQuality    Int
  initiativeRelevance Int
  challengeAdoption   Int
  badge               String?
  trophy              String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Team {
  id           Int              @id @default(autoincrement())
  title        String
  mission      String
  hostId       String?
  createdAt    DateTime         @default(now())
  teamavatorid String?
  members      TeamMember[]
  session      Session?
  scores       FinalTeamScore[]
  overallScores  OverallTeamScore[] 
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    String   
  role      String   @default("PLAYER")
  joinedAt  DateTime @default(now())

  team Team @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId])
}

model Session {
  id        Int      @id @default(autoincrement())
  teamId    Int      @unique
  token     String?  @unique
  createdAt DateTime @default(now())
  startedAt DateTime?
  team      Team     @relation(fields: [teamId], references: [id])
}

model UserAutoJoin {
  id      Int     @id @default(autoincrement())
  userId  String  @unique   // now string
  allowed Boolean @default(true)
}

model FinalTeamScore {
  id                  Int      @id @default(autoincrement())
  userId              String   // now string
  teamId              Int
  teamName            String?
  score               Int
  title               String?
  alignmentStrategy   Int
  objectiveClarity    Int
  keyResultQuality    Int
  initiativeRelevance Int
  challengeAdoption   Int
  time                String?
  badge               String?
  trophy              String?
  avgPercentage       Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id])
}


model OverallTeamScore {
  id             Int       @id @default(autoincrement())
  teamId         Int
  teamName       String?
  avgScore       Float
  avgResolution  Float
  totalMembers   Int
  rank           Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  team Team @relation(fields: [teamId], references: [id])
}


model CampaignSession {
  id         String   @id @default(uuid())
  playerId   String
  username   String
  strategyId String?
  progress   Json
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CampaignModeScore {
  id              Int      @id @default(autoincrement())
  userId          String?
  campaignId      Int?
  level           Int
  sector          String?
  role            String?
  strategyScore   Int?
  objectiveScore  Int?
  keyResultScore  Int?
  initiativeScore Int?
  challengeScore  Int?
  strengths       String?
  improvement     String?
  totalScore      Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model CertificationChallenge {
  id        Int    @id @default(autoincrement())
  userId    Int
  name      String
  scenario  String
  strategy  String
  type      ChallengeItemType
  parentId  Int?

  parent    CertificationChallenge?  @relation("ItemHierarchy", fields: [parentId], references: [id])
  children  CertificationChallenge[] @relation("ItemHierarchy")
}

enum ChallengeItemType {
  CHALLENGE
  OBJECTIVE
  KEY_RESULT
  INNOVATIVE
}

model Subscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  planId    Int
  startDate DateTime @default(now())
  expiryDate DateTime
  active    Boolean  @default(true)
}



model Challenge {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  hostId    String
  playerId  String?
  status    ChallengeStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  invitations ChallengeInvitation[]
  host      User     @relation("HostChallenges", fields: [hostId], references: [id])
  player    User?    @relation("PlayerChallenges", fields: [playerId], references: [id])
}

model ChallengeInvitation {
  id          Int    @id @default(autoincrement())
  challengeId Int
  playerId    String
  status      InvitationStatus @default(PENDING)
  createdAt   DateTime @default(now())

  challenge Challenge @relation(fields: [challengeId], references: [id])
  player    User      @relation(fields: [playerId], references: [id])
}

enum ChallengeStatus {
  PENDING
  READY
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}
